# START OF FILE: src/app/services/lead_service.py

from telegram import Bot
from telegram.constants import ParseMode
from telegram.error import TelegramError
from typing import Dict, List
import asyncio

from src.infra.clients.supabase_repo import SupabaseRepo
from src.domain.models import Lead, User
from src.shared.logger import logger

class LeadService:
    def __init__(self, repo: SupabaseRepo, bot: Bot):
        self.repo = repo
        self.bot = bot # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ –≤—Å–µ –µ—â–µ "–ø—É—Å—Ç—ã—à–∫–∞", —Ä–µ–∞–ª—å–Ω—ã–π bot –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞
        logger.info("LeadService initialized for multi-tenancy.")

    async def save_lead(self, user: User, lead_data: dict, client_id: int, manager_contact: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–∏–¥ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        lead = Lead(
            user_id=user.id,
            name=lead_data.get('name'),
            debt_amount=lead_data.get('debt'),
            income_source=lead_data.get('income'),
            region=lead_data.get('region')
        )
        self.repo.save_lead(lead, client_id)
        await self._notify_manager_on_lead(user, lead, manager_contact)

    async def _notify_manager_on_lead(self, user: User, lead: Lead, manager_contact: str):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∞–Ω–∫–µ—Ç–µ."""
        if not manager_contact:
            logger.warning("Manager contact is not set for this client. Skipping notification.")
            return

        username = f"@{user.username}" if user.username else f"ID: {user.id}"
        message_text = (
            f"<b>‚úÖ –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç {username}</b>\n\n"
            f"<b>–ò–º—è:</b> {lead.name}\n"
            f"<b>–°—É–º–º–∞ –¥–æ–ª–≥–∞:</b> {lead.debt_amount}\n"
            f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞:</b> {lead.income_source}\n"
            f"<b>–†–µ–≥–∏–æ–Ω:</b> {lead.region}"
        )
        try:
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú self.bot, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ
            await self.bot.send_message(
                chat_id=manager_contact, text=message_text, parse_mode=ParseMode.HTML
            )
            logger.info(f"Notification for new lead from {user.id} sent to manager {manager_contact}.")
        except Exception as e:
            logger.error(f"Failed to send lead notification to manager {manager_contact}: {e}", exc_info=True)

    async def send_quiz_results_to_manager(self, user: User, answers: Dict, manager_contact: str):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        if not manager_contact:
            logger.warning("Manager contact is not set for this client. Skipping quiz results notification.")
            return

        username = f"@{user.username}" if user.username else f"ID: {user.id}"
        
        report_lines = [f"<b>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞ –æ—Ç {username}</b>"]
        for question, answer in answers.items():
            report_lines.append(f"\n<b>{question}</b>\n- {answer}")
        message_text = "\n".join(report_lines)
        
        try:
            await self.bot.send_message(
                chat_id=manager_contact, text=message_text, parse_mode=ParseMode.HTML
            )
            logger.info(f"Quiz results for user {user.id} sent to manager {manager_contact}.")
        except Exception as e:
            logger.error(f"Failed to send quiz results to manager {manager_contact}: {e}", exc_info=True)

    # –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    async def _broadcast_message_task(self, context: Dict):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ job_queue.
        """
        bot: Bot = context['bot']
        client_id: int = context['client_id']
        message: str = context['message']
        admin_chat_id: int = context['admin_chat_id']

        user_ids = self.repo.get_lead_user_ids_by_client(client_id)
        if not user_ids:
            await bot.send_message(admin_chat_id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –∑–∞—è–≤–∫—É.")
            return

        successful_sends = 0
        failed_sends = 0

        for user_id in user_ids:
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
                successful_sends += 1
            except TelegramError as e:
                logger.error(f"Broadcast failed for user {user_id} (client {client_id}). Error: {e}")
                failed_sends += 1
            
            # –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú-–ë–õ–û–ö–ò–†–û–í–ö–ò: –ü–∞—É–∑–∞ 100 –º—Å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
            # –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å ~10 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫, —á—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ.
            await asyncio.sleep(0.1)

        summary_report = (
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"<b>–ö–ª–∏–µ–Ω—Ç ID:</b> {client_id}\n"
            f"<b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {successful_sends}\n"
            f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> {failed_sends}"
        )
        await bot.send_message(admin_chat_id, summary_report, parse_mode=ParseMode.HTML)


# END OF FILE: src/app/services/lead_service.py