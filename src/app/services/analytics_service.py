# START OF FILE: src/app/services/analytics_service.py

from src.infra.clients.supabase_repo import SupabaseRepo
from src.shared.logger import logger

class AnalyticsService:
    def __init__(self, repo: SupabaseRepo):
        self.repo = repo
        logger.info("AnalyticsService initialized.")

    def _format_data_as_list(self, data: list, title: str, name_key: str, count_key: str) -> str:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫—É."""
        if not data:
            return f"<b>{title}</b>\n<i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>"
        
        lines = [f"<b>{title}</b>"]
        for item in data:
            lines.append(f"- {item.get(name_key, 'N/A')}: {item.get(count_key, 0)}")
        return "\n".join(lines)

    def generate_summary_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞."""
        logger.info("Generating analytics summary report...")
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            source_data = self.repo.get_analytics_by_source()
            region_data = self.repo.get_analytics_by_region()
            dow_data = self.repo.get_analytics_by_day_of_week()

            # 2. –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤
            total_leads = sum(item.get('lead_count', 0) for item in source_data)

            # 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é
            report_parts = [
                f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</b>\n\n<b>–í—Å–µ–≥–æ –ª–∏–¥–æ–≤: {total_leads}</b>\n",
                self._format_data_as_list(source_data, "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ª–∏–¥–æ–≤ (UTM):", "source_name", "lead_count"),
                self._format_data_as_list(region_data, "–¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤:", "region_name", "lead_count"),
                self._format_data_as_list(dow_data, "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:", "day_name", "lead_count"),
            ]
            
            logger.info("Analytics report generated successfully.")
            return "\n\n".join(report_parts)
            
        except Exception as e:
            logger.error(f"Failed to generate analytics report: {e}", exc_info=True)
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞."

# END OF FILE: src/app/services/analytics_service.py