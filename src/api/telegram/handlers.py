# START OF FILE: src/api/telegram/handlers.py

import io
import re
from datetime import datetime, timedelta
from pydub import AudioSegment
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode, ChatAction

from src.app.services.ai_service import AIService
from src.app.services.lead_service import LeadService
from src.app.services.analytics_service import AnalyticsService
from src.domain.models import User, Message
from src.api.telegram.keyboards import (
    get_main_keyboard, cancel_keyboard, make_quiz_keyboard, admin_keyboard,
    broadcast_media_keyboard, broadcast_confirm_keyboard
)
from src.infra.clients.sheets_client import GoogleSheetsClient
from src.shared.logger import logger
from src.shared.config import (
    GET_NAME, GET_DEBT, GET_INCOME, GET_REGION,
    GET_BROADCAST_MESSAGE, GET_BROADCAST_MEDIA, CONFIRM_BROADCAST
)

def get_client_context(context: ContextTypes.DEFAULT_TYPE) -> (int, str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç client_id –∏ manager_contact –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞."""
    client_id = context.bot_data.get('client_id')
    manager_contact = context.bot_data.get('manager_contact')
    return client_id, manager_contact

async def _process_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE, user_question: str):
    ai_service: AIService = context.application.bot_data['ai_service']
    user_id = update.effective_user.id
    client_id, _ = get_client_context(context)

    if context.user_data.get('is_admin_mode'):
        await update.message.reply_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.")
        return

    user_category = ai_service.repo.get_user_category(user_id, client_id)
    if user_category is None:
        logger.info(f"User {user_id} (client {client_id}) has no category. Classifying...")
        new_category = ai_service.classify_text(user_question)
        if new_category:
            ai_service.repo.update_user_category(user_id, new_category, client_id)

    ai_service.repo.save_message(user_id, Message(role='user', content=user_question), client_id)
    await update.message.reply_chat_action(ChatAction.TYPING)

    response_text, debug_info = ai_service.get_text_response(user_id, user_question, client_id)
    context.application.bot_data.setdefault('last_debug_info', {})[client_id] = debug_info
    ai_service.repo.save_message(user_id, Message(role='assistant', content=response_text), client_id)
    
    quiz_completed, _ = ai_service.repo.get_user_quiz_status(user_id, client_id)
    reply_markup = get_main_keyboard(context)
    parse_mode = None 
    
    quiz_data = context.bot_data.get('quiz_data')
    if quiz_data and not quiz_completed:
        quiz_prompt_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üéØ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏", callback_data="start_quiz_from_prompt")]])
        reply_markup = quiz_prompt_keyboard
        response_text += "\n\n_–ß—Ç–æ–±—ã —è –º–æ–≥ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–≤–∏–∑\\._"
        parse_mode = ParseMode.MARKDOWN_V2

    await update.message.reply_text(response_text, reply_markup=reply_markup, parse_mode=parse_mode)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data['is_admin_mode'] = False
    
    lead_service: LeadService = context.application.bot_data['lead_service']
    user_data = update.effective_user
    client_id, _ = get_client_context(context)
    utm_source = context.args[0] if context.args else None
    user = User(id=user_data.id, username=user_data.username, first_name=user_data.first_name, utm_source=utm_source)
    lead_service.repo.save_user(user, client_id)
    
    await update.message.reply_text(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n'
        'üìù –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n'
        'üéØ –ü—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É.\n'
        '‚ùì –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.',
        reply_markup=get_main_keyboard(context)
    )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _process_user_message(update, context, update.message.text)

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ai_service: AIService = context.application.bot_data['ai_service']
    await update.message.reply_text("–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é...")
    await update.message.reply_chat_action(ChatAction.TYPING)
    voice = update.message.voice
    voice_file = await voice.get_file()
    voice_bytes = await voice_file.download_as_bytearray()
    try:
        ogg_stream = io.BytesIO(voice_bytes)
        audio = AudioSegment.from_file(ogg_stream)
        mp3_stream = io.BytesIO()
        audio.export(mp3_stream, format="mp3")
        mp3_stream.seek(0)
        transcribed_text = ai_service.transcribe_voice(mp3_stream.read())
    except Exception as e:
        logger.error(f"Error converting audio: {e}", exc_info=True)
        transcribed_text = None
    if transcribed_text:
        await update.message.reply_text(f"–í–∞—à –≤–æ–ø—Ä–æ—Å: ¬´{transcribed_text}¬ª\n\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        await _process_user_message(update, context, transcribed_text)
    else:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.")

async def contact_human(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    _, manager_contact = get_client_context(context)
    user = update.effective_user
    username = f"@{user.username}" if user.username else f"ID: {user.id}"
    message_for_manager = f"<b>üßë‚Äçüíº –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å –æ—Ç {username}</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
    if manager_contact:
        lead_service: LeadService = context.application.bot_data['lead_service']
        lead_service.bot = context.bot
        await context.bot.send_message(chat_id=manager_contact, text=message_for_manager, parse_mode=ParseMode.HTML)
    await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.", reply_markup=get_main_keyboard(context))

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    client_id, _ = get_client_context(context)
    quiz_data = context.bot_data.get('quiz_data')
    if not quiz_data:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–≤–∏–∑ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=get_main_keyboard(context))
        return
    context.user_data['quiz_answers'] = {}
    step = 0
    question_data = quiz_data[step]
    keyboard = make_quiz_keyboard(question_data["answers"], step)
    await update.message.reply_text(question_data["question"], reply_markup=keyboard)

async def quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    client_id, manager_contact = get_client_context(context)
    quiz_data = context.bot_data.get('quiz_data')
    if not quiz_data:
        await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–≤–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    lead_service: LeadService = context.application.bot_data['lead_service']
    parts = query.data.split('_')
    step = int(parts[2])
    answer_index = int(parts[4])
    question_data = quiz_data[step]
    answer_data = question_data["answers"][answer_index]
    question_text = re.sub(r'^\d+/\d+\.\s*', '', question_data["question"])
    context.user_data.setdefault('quiz_answers', {})[question_text] = answer_data["text"]
    next_step = step + 1
    if next_step < len(quiz_data):
        next_question_data = quiz_data[next_step]
        keyboard = make_quiz_keyboard(next_question_data["answers"], next_step)
        await query.edit_message_text(text=next_question_data["question"], reply_markup=keyboard)
    else:
        user = update.effective_user
        quiz_answers = context.user_data.get('quiz_answers', {})
        lead_service.repo.save_quiz_results(user.id, quiz_answers, client_id)
        lead_service.bot = context.bot
        await lead_service.send_quiz_results_to_manager(user, quiz_answers, manager_contact)
        await query.edit_message_text(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
        context.user_data.pop('quiz_answers', None)

async def start_quiz_from_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    client_id, _ = get_client_context(context)
    quiz_data = context.bot_data.get('quiz_data')
    if not quiz_data:
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–≤–∏–∑ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    await query.edit_message_reply_markup(reply_markup=None)
    context.user_data['quiz_answers'] = {}
    step = 0
    question_data = quiz_data[step]
    keyboard = make_quiz_keyboard(question_data["answers"], step)
    await query.message.reply_text(question_data["question"], reply_markup=keyboard)

def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    _, manager_contact = get_client_context(context)
    return str(update.effective_user.id) == manager_contact

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update, context): return
    context.user_data['is_admin_mode'] = True
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.",
        reply_markup=admin_keyboard
    )

async def last_answer_debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update, context): return
    client_id, _ = get_client_context(context)
    debug_info = context.application.bot_data.get('last_debug_info', {}).get(client_id)
    if not debug_info:
        await update.message.reply_text("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—â–µ –Ω–µ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞.")
        return
    rag_chunks = debug_info.get('rag_chunks', [])
    rag_report = "\n\n".join(f"<b>Score: {chunk.get('similarity', 0):.4f}</b>\n<i>{chunk.get('content', '')}</i>" for chunk in rag_chunks) if rag_chunks else "<i>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.</i>"
    history = debug_info.get('conversation_history', [])
    history_report = "\n".join(f"<b>{msg['role']}:</b> {msg['content']}" for msg in history) if history else "<i>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞.</i>"
    report = (f"<b>--- –û—Ç–ª–∞–¥–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–ö–ª–∏–µ–Ω—Ç ID: {client_id}) ---</b>\n\n" f"<b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> {debug_info.get('processing_time', 'N/A')}\n" f"<b>–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {debug_info.get('user_question', 'N/A')}\n\n" f"<b>--- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ ---</b>\n{history_report}\n\n" f"<b>--- –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (RAG) ---</b>\n{rag_report}")
    await update.message.reply_text(report, parse_mode=ParseMode.HTML)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update, context): return
    client_id, _ = get_client_context(context)
    analytics_service: AnalyticsService = context.application.bot_data['analytics_service']
    await update.message.reply_chat_action(ChatAction.TYPING)
    report = analytics_service.generate_summary_report(client_id)
    await update.message.reply_text(report, parse_mode=ParseMode.HTML)

async def health_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update, context): return
    client_id, _ = get_client_context(context)
    await update.message.reply_text(f"‚úÖ –ë–æ—Ç –≤ —Å–µ—Ç–∏. ID –∫–ª–∏–µ–Ω—Ç–∞: {client_id}.")

async def get_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update, context): return
    client_id, _ = get_client_context(context)
    ai_service: AIService = context.application.bot_data['ai_service']
    current_prompt = ai_service.repo.get_client_system_prompt(client_id)
    if current_prompt:
        response_text = f"<b>–¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–ö–ª–∏–µ–Ω—Ç ID: {client_id}):</b>\n\n<pre>{current_prompt}</pre>"
        await update.message.reply_text(response_text, parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç.")

async def set_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update, context): return
    client_id, _ = get_client_context(context)
    ai_service: AIService = context.application.bot_data['ai_service']
    if not context.args:
        await update.message.reply_text(
            "<b>–û—à–∏–±–∫–∞:</b> –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞.\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
            "/set_prompt –¢—ã ‚Äî –≤–µ—Å—ë–ª—ã–π –ø–∏—Ä–∞—Ç-—é—Ä–∏—Å—Ç.",
            parse_mode=ParseMode.HTML
        )
        return
    new_prompt = " ".join(context.args)
    success = ai_service.repo.update_client_system_prompt(client_id, new_prompt)
    if success:
        await update.message.reply_text("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await get_prompt(update, context)
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞.")

async def export_leads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update, context): return
    await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...")
    client_id, _ = get_client_context(context)
    sheet_id = context.bot_data.get('google_sheet_id')
    if not sheet_id:
        await update.message.reply_text("‚ùå **–û—à–∏–±–∫–∞:** ID Google –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    lead_service: LeadService = context.application.bot_data['lead_service']
    start_date_str, end_date_str = None, None
    if context.args and len(context.args) == 2:
        start_date_str, end_date_str = context.args[0], context.args[1]
    try:
        if start_date_str is None:
            today = datetime.today().date()
            start_of_this_week = today - timedelta(days=today.weekday())
            start_date = start_of_this_week - timedelta(days=7)
            end_date = start_date + timedelta(days=6)
            start_date_str, end_date_str = start_date.isoformat(), end_date.isoformat()
        leads_data = lead_service.repo.get_leads_for_export(client_id, start_date_str, end_date_str)
        sheets_client = GoogleSheetsClient(sheet_id=sheet_id)
        result = sheets_client.export_leads(leads_data, start_date_str, end_date_str)
        await update.message.reply_text(f"‚úÖ {result}")
    except Exception as e:
        logger.error(f"Failed to export leads for client {client_id}: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")

async def quiz_management_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update, context): return
    await update.message.reply_text(
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∏–∑–æ–º:</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∫–≤–∏–∑—ã –ø—Ä—è–º–æ –∏–∑ Telegram.",
        parse_mode=ParseMode.HTML
    )

# --- –ú–∞—Å—Ç–µ—Ä –†–∞—Å—Å—ã–ª–æ–∫ ---
async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not is_admin(update, context): return ConversationHandler.END
    await update.message.reply_text(
        "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        "<b>–®–∞–≥ 1/3:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ç–µ–≥–∏.",
        parse_mode=ParseMode.HTML,
        reply_markup=cancel_keyboard
    )
    return GET_BROADCAST_MESSAGE

async def broadcast_get_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['broadcast_message'] = update.message.text_html
    await update.message.reply_text(
        "–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω.\n\n"
        "<b>–®–∞–≥ 2/3:</b> –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç?",
        parse_mode=ParseMode.HTML,
        reply_markup=broadcast_media_keyboard
    )
    return GET_BROADCAST_MEDIA

async def broadcast_get_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message
    media_type, file_id = None, None
    if message.photo:
        media_type, file_id = 'photo', message.photo[-1].file_id
    elif message.document:
        media_type, file_id = 'document', message.document.file_id
    context.user_data['broadcast_media_type'] = media_type
    context.user_data['broadcast_media_file_id'] = file_id
    await update.message.reply_text("–ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å.")
    await broadcast_preview(update, context)
    return CONFIRM_BROADCAST

async def broadcast_skip_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–•–æ—Ä–æ—à–æ, —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º. –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å.")
    await broadcast_preview(update, context)
    return CONFIRM_BROADCAST

async def broadcast_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = context.user_data.get('broadcast_message')
    media_type = context.user_data.get('broadcast_media_type')
    file_id = context.user_data.get('broadcast_media_file_id')
    await update.effective_message.reply_text("<b>–®–∞–≥ 3/3: –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.</b>\n\n–í–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —ç—Ç–æ:", parse_mode=ParseMode.HTML)
    try:
        if media_type == 'photo':
            await update.effective_message.reply_photo(photo=file_id, caption=message_text, parse_mode=ParseMode.HTML)
        elif media_type == 'document':
            await update.effective_message.reply_document(document=file_id, caption=message_text, parse_mode=ParseMode.HTML)
        else:
            await update.effective_message.reply_text(message_text, parse_mode=ParseMode.HTML)
    except Exception as e:
        await update.effective_message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}\n\n–ü–æ—Ö–æ–∂–µ, —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
    await update.effective_message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=broadcast_confirm_keyboard)

async def broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    client_id, _ = get_client_context(context)
    lead_service: LeadService = context.application.bot_data['lead_service']
    job_context = {
        'bot': context.bot, 'client_id': client_id, 'admin_chat_id': update.effective_chat.id,
        'message': context.user_data.get('broadcast_message'),
        'media_type': context.user_data.get('broadcast_media_type'),
        'media_file_id': context.user_data.get('broadcast_media_file_id')
    }
    context.job_queue.run_once(lead_service._broadcast_message_task, when=1, data=job_context, name=f"broadcast_{client_id}_{update.update_id}")
    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ID {client_id} –∑–∞–ø—É—â–µ–Ω–∞. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.", reply_markup=admin_keyboard)
    context.user_data.clear()
    return ConversationHandler.END

async def broadcast_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_keyboard)
    context.user_data.clear()
    return ConversationHandler.END

# --- –õ–æ–≥–∏–∫–∞ –∞–Ω–∫–µ—Ç—ã ---
async def start_form(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã.\n\n–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=cancel_keyboard)
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–ö–∞–∫–∞—è —É –≤–∞—Å –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏?", reply_markup=cancel_keyboard)
    return GET_DEBT

async def get_debt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['debt'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞.", reply_markup=cancel_keyboard)
    return GET_INCOME

async def get_income(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['income'] = update.message.text
    await update.message.reply_text("–í –∫–∞–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ (–æ–±–ª–∞—Å—Ç—å, –∫—Ä–∞–π) –≤—ã –ø—Ä–æ–ø–∏—Å–∞–Ω—ã?", reply_markup=cancel_keyboard)
    return GET_REGION

async def get_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lead_service: LeadService = context.application.bot_data['lead_service']
    client_id, manager_contact = get_client_context(context)
    user_data = update.effective_user
    context.user_data['region'] = update.message.text
    user = User(id=user_data.id, username=user_data.username, first_name=user_data.first_name)
    lead_service.bot = context.bot
    await lead_service.save_lead(user, context.user_data, client_id, manager_contact)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=get_main_keyboard(context))
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard(context))
    context.user_data.clear()
    return ConversationHandler.END

# END OF FILE: src/api/telegram/handlers.py