# START OF FILE: main.py

import sys
import os
import asyncio
import uvicorn
from typing import Dict

sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from fastapi import FastAPI, Request, Response
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, CallbackQueryHandler, ContextTypes, ExtBot
)

from src.shared.logger import logger
from src.shared.config import (
    PUBLIC_APP_URL, PORT, RUN_MODE, GET_NAME, GET_DEBT, GET_INCOME, GET_REGION
)
from src.infra.clients.supabase_repo import SupabaseRepo
from src.infra.clients.openrouter_client import OpenRouterClient
from src.infra.clients.hf_whisper_client import WhisperClient
from src.app.services.ai_service import AIService
from src.app.services.lead_service import LeadService
from src.app.services.analytics_service import AnalyticsService
from src.api.telegram import handlers

# --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â ---
fastapi_app = FastAPI(docs_url=None, redoc_url=None) # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
bots: Dict[str, Application] = {}
client_configs: Dict[str, Dict] = {}

def register_handlers(app: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞ Application."""
    form_button_filter = filters.Regex('^üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É$')
    contact_button_filter = filters.Regex('^üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$')
    cancel_filter = filters.Regex('^–û—Ç–º–µ–Ω–∞$')
    quiz_button_filter = filters.Regex('^üéØ –ö–≤–∏–∑$')

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(form_button_filter, handlers.start_form)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_name)],
            GET_DEBT: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_debt)],
            GET_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_income)],
            GET_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_region)],
        },
        fallbacks=[CommandHandler('cancel', handlers.cancel), MessageHandler(cancel_filter, handlers.cancel)],
    )
    
    app.add_handler(CommandHandler("start", handlers.start))
    app.add_handler(CommandHandler("stats", handlers.stats))
    app.add_handler(CommandHandler("last_answer", handlers.last_answer_debug))
    app.add_handler(CommandHandler("health_check", handlers.health_check))
    
    app.add_handler(CallbackQueryHandler(handlers.quiz_answer, pattern='^quiz_step_'))
    app.add_handler(CallbackQueryHandler(handlers.start_quiz_from_prompt, pattern='^start_quiz_from_prompt$'))

    app.add_handler(MessageHandler(quiz_button_filter, handlers.start_quiz))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(contact_button_filter, handlers.contact_human))
    
    app.add_handler(MessageHandler(filters.VOICE, handlers.handle_voice_message))
    text_filter = filters.TEXT & ~filters.COMMAND & ~form_button_filter & ~contact_button_filter & ~quiz_button_filter
    app.add_handler(MessageHandler(text_filter, handlers.handle_text_message))

async def setup_bot(token: str, client_config: Dict, common_services: Dict) -> Application:
    """–°–æ–∑–¥–∞–µ—Ç, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞."""
    app = Application.builder().token(token).build()
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º bot_data –æ–±—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞
    app.bot_data.update(common_services)
    app.bot_data['client_id'] = client_config['id']
    app.bot_data['manager_contact'] = client_config['manager_contact']
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–≤–∏–∑–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å None) –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    app.bot_data['quiz_data'] = client_config.get('quiz_data')
    
    register_handlers(app)
    
    await app.initialize()
    await app.start()
    
    if RUN_MODE == 'WEBHOOK':
        webhook_url = f"{PUBLIC_APP_URL}/{token}"
        if not (await app.bot.set_webhook(url=webhook_url, allowed_updates=Update.ALL_TYPES)):
            logger.error(f"Failed to set webhook for bot ...{token[-4:]} to {webhook_url}")
        else:
            logger.info(f"Webhook set for bot ...{token[-4:]} to {webhook_url}")

    return app

# --- 2. –†–æ—É—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram ---
@fastapi_app.post("/{bot_token}")
async def handle_webhook(bot_token: str, request: Request):
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –≤–µ–±—Ö—É–∫–æ–≤."""
    if bot_token in bots:
        update_json = await request.json()
        update = Update.de_json(update_json, bots[bot_token].bot)
        await bots[bot_token].process_update(update)
        return Response(status_code=200)
    else:
        logger.warning(f"Received update for unknown token ending in ...{bot_token[-4:]}")
        return Response(status_code=404)

# --- 3. –õ–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
@fastapi_app.on_event("startup")
async def startup_event():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("Application startup...")
    
    supabase_repo = SupabaseRepo()
    or_client = OpenRouterClient()
    whisper_client = WhisperClient()
    
    # –°–æ–∑–¥–∞–µ–º "–ø—É—Å—Ç—ã—à–∫—É" –±–æ—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –æ–Ω –Ω—É–∂–µ–Ω
    generic_bot = ExtBot(token="12345:ABCDE") 
    
    common_services = {
        'ai_service': AIService(or_client, whisper_client, supabase_repo),
        'lead_service': LeadService(supabase_repo, generic_bot),
        'analytics_service': AnalyticsService(supabase_repo),
        'last_debug_info': {}
    }

    clients = supabase_repo.get_active_clients()
    if not clients:
        logger.error("No active clients found. Application will not start any bots.")
        return

    for client in clients:
        token = client['bot_token']
        client_configs[token] = client
        bot_app = await setup_bot(token, client, common_services)
        bots[token] = bot_app
    
    logger.info(f"Initialized {len(bots)} bot(s).")
    
@fastapi_app.on_event("shutdown")
async def shutdown_event():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("Application shutdown...")
    for app in bots.values():
        await app.stop()
        await app.shutdown()

# --- 4. –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
def main():
    if RUN_MODE == 'POLLING':
        logger.error("POLLING mode is not supported in this architecture. Please use WEBHOOK.")
        return

    logger.info("Starting Uvicorn server...")
    uvicorn.run(
        app=fastapi_app,
        host="0.0.0.0",
        port=PORT
    )

if __name__ == "__main__":
    main()

# END OF FILE: main.py