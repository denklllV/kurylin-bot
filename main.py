# START OF FILE: main.py

import sys
import os
import asyncio
from typing import Dict

sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, CallbackQueryHandler, ContextTypes, ExtBot
)

from src.shared.logger import logger
from src.shared.config import (
    PUBLIC_APP_URL, PORT, RUN_MODE, GET_NAME, GET_DEBT, GET_INCOME, GET_REGION
)
from src.infra.clients.supabase_repo import SupabaseRepo
from src.infra.clients.openrouter_client import OpenRouterClient
from src.infra.clients.hf_whisper_client import WhisperClient
from src.app.services.ai_service import AIService
from src.app.services.lead_service import LeadService
from src.app.services.analytics_service import AnalyticsService
from src.api.telegram import handlers

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤: {token: client_data}
client_config_cache: Dict[str, Dict] = {}

async def context_injector_middleware(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    Middleware: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω—É –∏ "–≤–ø—Ä—ã—Å–∫–∏–≤–∞–µ—Ç" –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –≤ context.
    –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
    """
    token = context.bot.token
    if token in client_config_cache:
        client_data = client_config_cache[token]
        # –í–∞–∂–Ω–æ: `bot_data` —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        context.bot_data['client_id'] = client_data['id']
        context.bot_data['manager_contact'] = client_data['manager_contact']
        return True # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    
    logger.warning(f"Received update for an unknown bot token ending in ...{token[-4:]}")
    return False # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤

def register_handlers(app: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—à–µ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –§–∏–ª—å—Ç—Ä—ã
    form_button_filter = filters.Regex('^üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É$')
    contact_button_filter = filters.Regex('^üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$')
    cancel_filter = filters.Regex('^–û—Ç–º–µ–Ω–∞$')
    quiz_button_filter = filters.Regex('^üéØ –ö–≤–∏–∑$')

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∫–µ—Ç—ã
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(form_button_filter, handlers.start_form)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_name)],
            GET_DEBT: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_debt)],
            GET_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_income)],
            GET_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_region)],
        },
        fallbacks=[CommandHandler('cancel', handlers.cancel), MessageHandler(cancel_filter, handlers.cancel)],
    )
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", handlers.start))
    app.add_handler(CommandHandler("stats", handlers.stats))
    app.add_handler(CommandHandler("last_answer", handlers.last_answer_debug))
    app.add_handler(CommandHandler("health_check", handlers.health_check))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(handlers.quiz_answer, pattern='^quiz_step_'))
    app.add_handler(CallbackQueryHandler(handlers.start_quiz_from_prompt, pattern='^start_quiz_from_prompt$'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    app.add_handler(MessageHandler(quiz_button_filter, handlers.start_quiz))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(contact_button_filter, handlers.contact_human))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.VOICE, handlers.handle_voice_message))
    text_filter = filters.TEXT & ~filters.COMMAND & ~form_button_filter & ~contact_button_filter & ~quiz_button_filter
    app.add_handler(MessageHandler(text_filter, handlers.handle_text_message))

async def main() -> None:
    logger.info(f"Starting multi-tenant bot in {RUN_MODE} mode...")

    supabase_repo = SupabaseRepo()
    clients = supabase_repo.get_active_clients()
    if not clients:
        logger.error("No active clients found. Shutting down.")
        return

    for client in clients:
        client_config_cache[client['bot_token']] = client

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ï–î–ò–ù–û–ì–û Application ---
    # –¢–æ–∫–µ–Ω –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    app = Application.builder().token(clients[0]['bot_token']).build()

    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à middleware –≤ –≥—Ä—É–ø–ø—É -1, —á—Ç–æ–±—ã –æ–Ω –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –ø–µ—Ä–≤—ã–º
    app.add_handler(MessageHandler(filters.ALL, context_injector_middleware), group=-1)

    register_handlers(app)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    or_client = OpenRouterClient()
    whisper_client = WhisperClient()
    generic_bot = ExtBot(token=clients[0]['bot_token'])
    
    ai_service = AIService(or_client, whisper_client, supabase_repo)
    lead_service = LeadService(supabase_repo, generic_bot)
    analytics_service = AnalyticsService(supabase_repo)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º `application.bot_data` –æ–±—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º
    app.bot_data['ai_service'] = ai_service
    app.bot_data['lead_service'] = lead_service
    app.bot_data['analytics_service'] = analytics_service
    app.bot_data['last_debug_info'] = {}

    if RUN_MODE == 'WEBHOOK':
        await app.initialize()
        for token in client_config_cache.keys():
             webhook_url = f"{PUBLIC_APP_URL}/{token}"
             temp_bot = ExtBot(token=token)
             await temp_bot.set_webhook(url=webhook_url, allowed_updates=Update.ALL_TYPES)
             logger.info(f"Webhook set for bot ...{token[-4:]} to {webhook_url}")
        
        await app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=clients[0]['bot_token'], # –≠—Ç–æ—Ç url_path –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
            webhook_url=PUBLIC_APP_URL
        )
    else: # POLLING
        logger.info("Starting polling for all clients...")
        await app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot shutdown requested.")
    except Exception as e:
        logger.error(f"An unhandled exception occurred in main: {e}", exc_info=True)

# END OF FILE: main.py