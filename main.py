# START OF FILE: main.py

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
from src.shared.logger import logger
from src.shared.config import TELEGRAM_TOKEN, PORT, WEBHOOK_URL, RUN_MODE, GET_NAME, GET_DEBT, GET_INCOME, GET_REGION

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å—ã
from src.infra.clients.supabase_repo import SupabaseRepo
from src.infra.clients.openrouter_client import OpenRouterClient
from src.infra.clients.hf_whisper_client import WhisperClient
from src.app.services.ai_service import AIService
from src.app.services.lead_service import LeadService

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
from src.api.telegram import handlers

def main() -> None:
    """–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ."""
    logger.info(f"Starting bot in {RUN_MODE} mode...")

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Dependency Injection)
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º "–∞–¥–∞–ø—Ç–µ—Ä—ã" —Å–ª–æ—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    supabase_repo = SupabaseRepo()
    or_client = OpenRouterClient()
    whisper_client = WhisperClient()
    
    # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è `bot` –≤ LeadService
    temp_bot_instance = Application.builder().token(TELEGRAM_TOKEN).build().bot
    
    ai_service = AIService(or_client, whisper_client)
    lead_service = LeadService(supabase_repo, temp_bot_instance)

    # 2. –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    # –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ `bot_data`, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
    application = (
        Application.builder()
        .token(TELEGRAM_TOKEN)
        .bot_data({'ai_service': ai_service, 'lead_service': lead_service})
        .build()
    )
    
    # 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    form_button_filter = filters.Regex('^üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É$')
    contact_button_filter = filters.Regex('^üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$')
    cancel_filter = filters.Regex('^–û—Ç–º–µ–Ω–∞$')

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(form_button_filter, handlers.start_form)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_name)],
            GET_DEBT: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_debt)],
            GET_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_income)],
            GET_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_region)],
        },
        fallbacks=[CommandHandler('cancel', handlers.cancel), MessageHandler(cancel_filter, handlers.cancel)],
    )
    
    application.add_handler(CommandHandler("start", handlers.start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(contact_button_filter, handlers.contact_human))
    application.add_handler(MessageHandler(filters.VOICE, handlers.handle_voice_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.handle_text_message))

    logger.info("All handlers have been registered.")
    
    # 4. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω–æ–º —Ä–µ–∂–∏–º–µ
    if RUN_MODE == 'POLLING':
        logger.info("Running in POLLING mode for local testing.")
        application.run_polling()
    else:
        webhook_url = f"{PUBLIC_APP_URL}/{TELEGRAM_TOKEN}"
        logger.info(f"Running in WEBHOOK mode. URL: {webhook_url}")
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TELEGRAM_TOKEN,
            webhook_url=webhook_url
        )

if __name__ == "__main__":
    main()

# END OF FILE: main.py