import os
import asyncio
import logging
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ê
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
PORT = int(os.environ.get('PORT', 8443))
WEBHOOK_URL = f"https://{os.getenv('RENDER_SERVICE_NAME')}.onrender.com/{TELEGRAM_TOKEN}"
client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=OPENROUTER_API_KEY)
MODEL_NAME = "mistralai/mistral-7b-instruct:free"
KNOWLEDGE_BASE = ""
try:
    with open('bankruptcy_law.md', 'r', encoding='utf-8') as f:
        BANKRUPTCY_CONTEXT = f.read()
    with open('interviews.md', 'r', encoding='utf-8') as f:
        INTERVIEWS_CONTEXT = f.read()
    KNOWLEDGE_BASE = BANKRUPTCY_CONTEXT + "\n\n" + INTERVIEWS_CONTEXT
    logger.info(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except FileNotFoundError:
    logger.warning("–í–Ω–∏–º–∞–Ω–∏–µ: –§–∞–π–ª—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
GET_NAME, GET_DEBT, GET_INCOME, GET_REGION = range(4)

# --- –ù–û–í–ê–Ø –ü–û–°–¢–û–Ø–ù–ù–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê ---
main_keyboard = ReplyKeyboardMarkup(
    [['üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', 'üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º']], 
    resize_keyboard=True
)
cancel_keyboard = ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)

# 2. –§–£–ù–ö–¶–ò–ò-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await update.message.reply_text(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n'
        'üìù –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n'
        '‚ùì –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.',
        reply_markup=main_keyboard
    )

# --- –õ–û–ì–ò–ö–ê –ê–ù–ö–ï–¢–ò–†–û–í–ê–ù–ò–Ø (–ò–ó–ú–ï–ù–ï–ù–ê) ---

async def start_form(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –∏–º—è."""
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã.\n\n"
        "–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
        reply_markup=cancel_keyboard
    )
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫–∞—è —É –≤–∞—Å –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏?", reply_markup=cancel_keyboard)
    return GET_DEBT

async def get_debt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['debt'] = update.message.text
    await update.message.reply_text("–ü–æ–Ω—è—Ç–Ω–æ. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–†–∞–±–æ—Ç–∞—é –ø–æ –¢–ö –†–§', '–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä', '–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π').", reply_markup=cancel_keyboard)
    return GET_INCOME

async def get_income(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['income'] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ. –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: –≤ –∫–∞–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ (–æ–±–ª–∞—Å—Ç—å, –∫—Ä–∞–π) –≤—ã –ø—Ä–æ–ø–∏—Å–∞–Ω—ã?", reply_markup=cancel_keyboard)
    return GET_REGION

async def get_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['region'] = update.message.text
    user_info = context.user_data
    summary = (
        f"<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã!</b>\n\n"
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ:\n"
        f"- <b>–ò–º—è:</b> {user_info.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"- <b>–°—É–º–º–∞ –¥–æ–ª–≥–∞:</b> {user_info.get('debt', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"- <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞:</b> {user_info.get('income', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"- <b>–†–µ–≥–∏–æ–Ω:</b> {user_info.get('region', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏."
    )
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
    await update.message.reply_text(summary, parse_mode='HTML', reply_markup=main_keyboard)
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∞–Ω–∫–µ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await update.message.reply_text("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
    context.user_data.clear()
    return ConversationHandler.END

async def contact_human(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º'."""
    await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º'. –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=main_keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –≤–æ–ø—Ä–æ—Å –∫ AI."""
    user_question = update.message.text
    await update.message.reply_text("–ò—â—É –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")
    loop = asyncio.get_running_loop()
    ai_answer = await loop.run_in_executor(None, get_ai_response, user_question)
    cleaned_answer = ai_answer.replace('<p>', '').replace('</p>', '')
    while '\n\n\n' in cleaned_answer:
        cleaned_answer = cleaned_answer.replace('\n\n\n', '\n\n')
    try:
        await update.message.reply_text(cleaned_answer, parse_mode='HTML', reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML: {e}. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await update.message.reply_text(cleaned_answer, reply_markup=main_keyboard)

# 3. –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ - –ó–ê–ü–£–°–ö –ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # --- –§–ò–õ–¨–¢–†–´ –î–õ–Ø –ö–ù–û–ü–û–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---
    form_button_filter = filters.Regex('^üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É$')
    contact_button_filter = filters.Regex('^üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$')
    
    # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¶–ï–ù–ê–†–ò–Ø –ê–ù–ö–ï–¢–ò–†–û–í–ê–ù–ò–Ø ---
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(form_button_filter, start_form)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–û—Ç–º–µ–Ω–∞$'), get_name)],
            GET_DEBT: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–û—Ç–º–µ–Ω–∞$'), get_debt)],
            GET_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–û—Ç–º–µ–Ω–∞$'), get_income)],
            GET_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–û—Ç–º–µ–Ω–∞$'), get_region)],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel)
        ],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(contact_button_filter, contact_human))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å—ã –∫ AI)
    # –û–Ω –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~form_button_filter & ~contact_button_filter, 
        handle_message
    ))
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}.")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TELEGRAM_TOKEN,
        webhook_url=WEBHOOK_URL
    )

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def find_relevant_chunks(question: str, knowledge_base: str, max_chunks=5) -> str:
    chunks = knowledge_base.split('\n\n')
    question_keywords = set(question.lower().split())
    scored_chunks = []
    for chunk in chunks:
        chunk_words = set(chunk.lower().split())
        score = len(question_keywords.intersection(chunk_words))
        if score > 0:
            scored_chunks.append((score, chunk))
    scored_chunks.sort(reverse=True, key=lambda x: x[0])
    top_chunks = [chunk for score, chunk in scored_chunks[:max_chunks]]
    return "\n\n".join(top_chunks)

def get_ai_response(question: str) -> str:
    dynamic_context = find_relevant_chunks(question, KNOWLEDGE_BASE)
    system_prompt = (
        "–¢–≤–æ—è —Ä–æ–ª—å ‚Äî –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ–µ –∏–º—è ‚Äî –í—è—á–µ—Å–ª–∞–≤. "
        "–¢–≤–æ—è —Ä–µ—á—å ‚Äî —á–µ–ª–æ–≤–µ—á–Ω–∞—è, –º—è–≥–∫–∞—è –∏ —ç–º–ø–∞—Ç–∏—á–Ω–∞—è. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∫—Ä–∞—Ç–∫–æ –∏ –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö —Ä–∞–∑—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–æ–Ω–æ—Å—è —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –≤–∞–∂–Ω—É—é —Å—É—Ç—å. "
        "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∏–∂–µ '–ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π'. –ï—Å–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏, —á—Ç–æ –Ω–µ –æ–±–ª–∞–¥–∞–µ—à—å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
        "**–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:**"
        "1. **–ö—Ä–∞—Ç–∫–æ—Å—Ç—å:** –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º, –≤ –∏–¥–µ–∞–ª–µ 1-2 –∞–±–∑–∞—Ü–∞."
        "2. **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è**, –µ—Å–ª–∏ —Ç–µ–±—è –Ω–µ —Å–ø—Ä–æ—Å–∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?'. –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—É—Ç–∏ –æ—Ç–≤–µ—Ç–∞."
        "3. **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π** —Å–ª–æ–≤–∞ '–∫–æ–Ω—Ç–µ–∫—Å—Ç' –∏–ª–∏ '–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'. –û—Ç–≤–µ—á–∞–π —Ç–∞–∫, –±—É–¥—Ç–æ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî —Ç–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è."
        "4. **–î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è** –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ HTML: <b>...</b> –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, <i>...</i> –¥–ª—è –∫—É—Ä—Å–∏–≤–∞. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–∑–∞—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–π –û–î–ù–£ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É."
    )
    user_prompt = f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n{dynamic_context}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {question}"
    try:
        completion = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt},
            ],
        )
        return completion.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter AI: {e}")
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—à–µ–Ω–∏–∏ –∫ AI-—Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

if __name__ == "__main__":
    main()