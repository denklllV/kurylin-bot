import os
import asyncio
import logging
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from supabase import create_client, Client

# 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ê
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
PORT = int(os.environ.get('PORT', 8443))
WEBHOOK_URL = f"https://{os.getenv('RENDER_SERVICE_NAME')}.onrender.com/{TELEGRAM_TOKEN}"
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')
# –ù–û–í–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
MANAGER_CHAT_ID = os.getenv('MANAGER_CHAT_ID')

# --- –ö–ª–∏–µ–Ω—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤ ---
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=OPENROUTER_API_KEY)
MODEL_NAME = "mistralai/mistral-7b-instruct:free"

# ... (–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –°–æ—Å—Ç–æ—è–Ω–∏—è, –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
KNOWLEDGE_BASE = ""
try:
    with open('bankruptcy_law.md', 'r', encoding='utf-8') as f: BANKRUPTCY_CONTEXT = f.read()
    with open('interviews.md', 'r', encoding='utf-8') as f: INTERVIEWS_CONTEXT = f.read()
    KNOWLEDGE_BASE = BANKRUPTCY_CONTEXT + "\n\n" + INTERVIEWS_CONTEXT
except FileNotFoundError: logger.warning("–í–Ω–∏–º–∞–Ω–∏–µ: –§–∞–π–ª—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
GET_NAME, GET_DEBT, GET_INCOME, GET_REGION = range(4)
main_keyboard = ReplyKeyboardMarkup([['üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', 'üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º']], resize_keyboard=True)
cancel_keyboard = ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)


# 2. –§–£–ù–ö–¶–ò–ò-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    try:
        supabase.table('users').upsert({'user_id': user.id, 'username': user.username, 'first_name': user.first_name}).execute()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ Supabase: {e}")
    await update.message.reply_text(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n'
        'üìù –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n'
        '‚ùì –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.',
        reply_markup=main_keyboard
    )

# --- –ù–û–í–´–ï –ò –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def save_lead_to_database(user_id: int, lead_data: dict):
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        data_to_insert = {'user_id': user_id, 'name': lead_data.get('name'), 'debt_amount': lead_data.get('debt'), 'income_source': lead_data.get('income'), 'region': lead_data.get('region')}
        supabase.table('leads').insert(data_to_insert).execute()
        logger.info(f"–ê–Ω–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î.")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –¥–ª—è {user_id} –≤ Supabase: {e}")
        return False

async def send_notification_to_manager(context: ContextTypes.DEFAULT_TYPE, message_text: str):
    """–û–¢–ü–†–ê–í–õ–Ø–ï–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–£ –í –õ–ò–ß–ù–´–ô –ß–ê–¢."""
    if not MANAGER_CHAT_ID:
        logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è MANAGER_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    try:
        await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=message_text, parse_mode='HTML')
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {MANAGER_CHAT_ID}.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç {MANAGER_CHAT_ID}: {e}")

# --- –õ–û–ì–ò–ö–ê –ê–ù–ö–ï–¢–ò–†–û–í–ê–ù–ò–Ø ---

# ... (start_form, get_name, get_debt, get_income - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def start_form(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã.\n\n–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=cancel_keyboard)
    return GET_NAME
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–ö–∞–∫–∞—è —É –≤–∞—Å –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏?", reply_markup=cancel_keyboard)
    return GET_DEBT
async def get_debt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['debt'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞.", reply_markup=cancel_keyboard)
    return GET_INCOME
async def get_income(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['income'] = update.message.text
    await update.message.reply_text("–í –∫–∞–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ (–æ–±–ª–∞—Å—Ç—å, –∫—Ä–∞–π) –≤—ã –ø—Ä–æ–ø–∏—Å–∞–Ω—ã?", reply_markup=cancel_keyboard)
    return GET_REGION

async def get_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–Ω–∫–µ—Ç—É, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –û–¢–ü–†–ê–í–õ–Ø–ï–¢ –†–ï–ê–õ–¨–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï."""
    context.user_data['region'] = update.message.text
    user = update.effective_user
    user_info = context.user_data
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    summary_for_manager = (
        f"<b>‚úÖ –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} (ID: {user.id})</b>\n\n"
        f"<b>–ò–º—è:</b> {user_info.get('name', '-')}\n"
        f"<b>–°—É–º–º–∞ –¥–æ–ª–≥–∞:</b> {user_info.get('debt', '-')}\n"
        f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞:</b> {user_info.get('income', '-')}\n"
        f"<b>–†–µ–≥–∏–æ–Ω:</b> {user_info.get('region', '-')}"
    )
    
    # –®–ê–ì 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_lead_to_database(user_id=user.id, lead_data=user_info)

    # –®–ê–ì 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await send_notification_to_manager(context, summary_for_manager)

    # –®–ê–ì 3: –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=main_keyboard)
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
    context.user_data.clear()
    return ConversationHandler.END

async def contact_human(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º', –æ—Ç–ø—Ä–∞–≤–ª—è—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    user = update.effective_user
    message_for_manager = f"<b>üßë‚Äçüíº –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å –æ—Ç @{user.username} (ID: {user.id})</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await send_notification_to_manager(context, message_for_manager)
    await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.", reply_markup=main_keyboard)


# ... (handle_message –∏ main –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_question = update.message.text
    await update.message.reply_text("–ò—â—É –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")
    loop = asyncio.get_running_loop()
    ai_answer = await loop.run_in_executor(None, get_ai_response, user_question)
    cleaned_answer = ai_answer.replace('<p>', '').replace('</p>', '')
    while '\n\n\n' in cleaned_answer: cleaned_answer = cleaned_answer.replace('\n\n\n', '\n\n')
    try:
        await update.message.reply_text(cleaned_answer, parse_mode='HTML', reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML: {e}. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await update.message.reply_text(cleaned_answer, reply_markup=main_keyboard)

def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    form_button_filter = filters.Regex('^üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É$')
    contact_button_filter = filters.Regex('^üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$')
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(form_button_filter, start_form)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–û—Ç–º–µ–Ω–∞$'), get_name)],
            GET_DEBT: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–û—Ç–º–µ–Ω–∞$'), get_debt)],
            GET_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–û—Ç–º–µ–Ω–∞$'), get_income)],
            GET_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–û—Ç–º–µ–Ω–∞$'), get_region)],
        },
        fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel)],
    )
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(contact_button_filter, contact_human))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~form_button_filter & ~contact_button_filter, handle_message))
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}.")
    application.run_webhook(listen="0.0.0.0", port=PORT, url_path=TELEGRAM_TOKEN, webhook_url=WEBHOOK_URL)


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò AI (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def find_relevant_chunks(question: str, knowledge_base: str, max_chunks=5) -> str:
    chunks = knowledge_base.split('\n\n')
    question_keywords = set(question.lower().split())
    scored_chunks = []
    for chunk in chunks:
        chunk_words = set(chunk.lower().split())
        score = len(question_keywords.intersection(chunk_words))
        if score > 0: scored_chunks.append((score, chunk))
    scored_chunks.sort(reverse=True, key=lambda x: x[0])
    top_chunks = [chunk for score, chunk in scored_chunks[:max_chunks]]
    return "\n\n".join(top_chunks)

def get_ai_response(question: str) -> str:
    dynamic_context = find_relevant_chunks(question, KNOWLEDGE_BASE)
    system_prompt = (
        "–¢–≤–æ—è —Ä–æ–ª—å ‚Äî –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ–µ –∏–º—è ‚Äî –í—è—á–µ—Å–ª–∞–≤. "
        "–¢–≤–æ—è —Ä–µ—á—å ‚Äî —á–µ–ª–æ–≤–µ—á–Ω–∞—è, –º—è–≥–∫–∞—è –∏ —ç–º–ø–∞—Ç–∏—á–Ω–∞—è. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∫—Ä–∞—Ç–∫–æ –∏ –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö —Ä–∞–∑—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–æ–Ω–æ—Å—è —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –≤–∞–∂–Ω—É—é —Å—É—Ç—å. "
        "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∏–∂–µ '–ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π'. –ï—Å–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏, —á—Ç–æ –Ω–µ –æ–±–ª–∞–¥–∞–µ—à—å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
        "**–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:**"
        "1. **–ö—Ä–∞—Ç–∫–æ—Å—Ç—å:** –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º, –≤ –∏–¥–µ–∞–ª–µ 1-2 –∞–±–∑–∞—Ü–∞."
        "2. **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è**, –µ—Å–ª–∏ —Ç–µ–±—è –Ω–µ —Å–ø—Ä–æ—Å–∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?'. –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—É—Ç–∏ –æ—Ç–≤–µ—Ç–∞."
        "3. **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π** —Å–ª–æ–≤–∞ '–∫–æ–Ω—Ç–µ–∫—Å—Ç' –∏–ª–∏ '–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'. –û—Ç–≤–µ—á–∞–π —Ç–∞–∫, –±—É–¥—Ç–æ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî —Ç–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è."
        "4. **–î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è** –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ HTML: <b>...</b> –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, <i>...</i> –¥–ª—è –∫—É—Ä—Å–∏–≤–∞. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–∑–∞—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–π –û–î–ù–£ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É."
    )
    user_prompt = f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n{dynamic_context}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {question}"
    try:
        completion = client.chat.completions.create(model=MODEL_NAME, messages=[{"role": "system", "content": system_prompt}, {"role": "user", "content": user_prompt}])
        return completion.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter AI: {e}")
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—à–µ–Ω–∏–∏ –∫ AI-—Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

if __name__ == "__main__":
    main()