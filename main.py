import os
import asyncio
import logging
from openai import OpenAI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler,
)

# 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ê
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
PORT = int(os.environ.get('PORT', 8443))
WEBHOOK_URL = f"https://{os.getenv('RENDER_SERVICE_NAME')}.onrender.com/{TELEGRAM_TOKEN}"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI-–∫–ª–∏–µ–Ω—Ç–∞ ---
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)
MODEL_NAME = "mistralai/mistral-7b-instruct:free"

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ---
KNOWLEDGE_BASE = ""
try:
    with open('bankruptcy_law.md', 'r', encoding='utf-8') as f:
        BANKRUPTCY_CONTEXT = f.read()
    with open('interviews.md', 'r', encoding='utf-8') as f:
        INTERVIEWS_CONTEXT = f.read()
    KNOWLEDGE_BASE = BANKRUPTCY_CONTEXT + "\n\n" + INTERVIEWS_CONTEXT
    logger.info(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except FileNotFoundError:
    logger.warning("–í–Ω–∏–º–∞–Ω–∏–µ: –§–∞–π–ª—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
# –ú—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞, —á—Ç–æ–±—ã –Ω–µ –æ—à–∏–±–∏—Ç—å—Å—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö.
AGREEMENT, GET_NAME, GET_DEBT, GET_INCOME, GET_REGION = range(5)

# 2. –§–£–ù–ö–¶–ò–ò-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é, –≤—ã–∑–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /menu.')

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_question')],
        [InlineKeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data='start_form')],
        [InlineKeyboardButton("üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º", callback_data='contact_human')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ AI
    user_question = update.message.text
    await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...")
    # ... (–ª–æ–≥–∏–∫–∞ AI –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    loop = asyncio.get_running_loop()
    ai_answer = await loop.run_in_executor(None, get_ai_response, user_question)
    cleaned_answer = ai_answer.replace('<p>', '').replace('</p>', '')
    while '\n\n\n' in cleaned_answer:
        cleaned_answer = cleaned_answer.replace('\n\n\n', '\n\n')
    try:
        await update.message.reply_text(cleaned_answer, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML: {e}. –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await update.message.reply_text(cleaned_answer)


# --- –õ–û–ì–ò–ö–ê –ê–ù–ö–ï–¢–ò–†–û–í–ê–ù–ò–Ø (–ù–û–í–´–ô –ë–õ–û–ö) ---

async def start_form(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è."""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data='agree'), InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='disagree')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text="–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω—É–∂–Ω–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞.",
        reply_markup=reply_markup
    )
    return AGREEMENT

async def ask_for_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    if query: # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å –∫–Ω–æ–ø–∫–∏
        await query.answer()
        await query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    else: # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /menu
         await update.message.reply_text(text="–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")

    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É –¥–æ–ª–≥–∞."""
    user_name = update.message.text
    context.user_data['name'] = user_name
    await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}! –ö–∞–∫–∞—è —É –≤–∞—Å –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏?")
    return GET_DEBT

async def get_debt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—É–º–º—É –¥–æ–ª–≥–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞."""
    context.user_data['debt'] = update.message.text
    await update.message.reply_text("–ü–æ–Ω—è—Ç–Ω–æ. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–†–∞–±–æ—Ç–∞—é –ø–æ –¢–ö –†–§', '–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä', '–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π').")
    return GET_INCOME

async def get_income(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω."""
    context.user_data['income'] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ. –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: –≤ –∫–∞–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ (–æ–±–ª–∞—Å—Ç—å, –∫—Ä–∞–π) –≤—ã –ø—Ä–æ–ø–∏—Å–∞–Ω—ã?")
    return GET_REGION

async def get_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–≥–∏–æ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    context.user_data['region'] = update.message.text
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_info = context.user_data
    summary = (
        f"<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã!</b>\n\n"
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ:\n"
        f"- <b>–ò–º—è:</b> {user_info.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"- <b>–°—É–º–º–∞ –¥–æ–ª–≥–∞:</b> {user_info.get('debt', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"- <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞:</b> {user_info.get('income', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"- <b>–†–µ–≥–∏–æ–Ω:</b> {user_info.get('region', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ /menu."
    )
    
    await update.message.reply_text(summary, parse_mode='HTML')
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    return ConversationHandler.END

async def cancel_form(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await update.message.reply_text("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤—ã–∑–≤–∞–≤ /menu.")
    context.user_data.clear()
    return ConversationHandler.END

async def handle_disagreement(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –æ—Ç —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ /menu.")
    return ConversationHandler.END


# 3. –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ - –ó–ê–ü–£–°–ö –ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # --- –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_form, pattern='^start_form$')],
        states={
            AGREEMENT: [
                CallbackQueryHandler(ask_for_name, pattern='^agree$'),
                CallbackQueryHandler(handle_disagreement, pattern='^disagree$')
            ],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_DEBT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_debt)],
            GET_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_income)],
            GET_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_region)],
        },
        fallbacks=[CommandHandler('cancel', cancel_form)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
    application.add_handler(conv_handler)

    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è)
    # application.add_handler(CallbackQueryHandler(button_handler)) # –ü–æ–∫–∞ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω

    # –ò —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # ... (–∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±—Ö—É–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}.")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TELEGRAM_TOKEN,
        webhook_url=WEBHOOK_URL
    )

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def find_relevant_chunks(question: str, knowledge_base: str, max_chunks=5) -> str:
    # ...
    chunks = knowledge_base.split('\n\n')
    question_keywords = set(question.lower().split())
    scored_chunks = []
    for chunk in chunks:
        chunk_words = set(chunk.lower().split())
        score = len(question_keywords.intersection(chunk_words))
        if score > 0:
            scored_chunks.append((score, chunk))
    scored_chunks.sort(reverse=True, key=lambda x: x[0])
    top_chunks = [chunk for score, chunk in scored_chunks[:max_chunks]]
    return "\n\n".join(top_chunks)

def get_ai_response(question: str) -> str:
    # ...
    dynamic_context = find_relevant_chunks(question, KNOWLEDGE_BASE)
    system_prompt = (
        "–¢–≤–æ—è —Ä–æ–ª—å ‚Äî –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ–µ –∏–º—è ‚Äî –í—è—á–µ—Å–ª–∞–≤. "
        "–¢–≤–æ—è —Ä–µ—á—å ‚Äî —á–µ–ª–æ–≤–µ—á–Ω–∞—è, –º—è–≥–∫–∞—è –∏ —ç–º–ø–∞—Ç–∏—á–Ω–∞—è. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∫—Ä–∞—Ç–∫–æ –∏ –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö —Ä–∞–∑—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–æ–Ω–æ—Å—è —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –≤–∞–∂–Ω—É—é —Å—É—Ç—å. "
        "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∏–∂–µ '–ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π'. –ï—Å–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏, —á—Ç–æ –Ω–µ –æ–±–ª–∞–¥–∞–µ—à—å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
        "**–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:**"
        "1. **–ö—Ä–∞—Ç–∫–æ—Å—Ç—å:** –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º, –≤ –∏–¥–µ–∞–ª–µ 1-2 –∞–±–∑–∞—Ü–∞."
        "2. **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è**, –µ—Å–ª–∏ —Ç–µ–±—è –Ω–µ —Å–ø—Ä–æ—Å–∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?'. –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—É—Ç–∏ –æ—Ç–≤–µ—Ç–∞."
        "3. **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π** —Å–ª–æ–≤–∞ '–∫–æ–Ω—Ç–µ–∫—Å—Ç' –∏–ª–∏ '–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'. –û—Ç–≤–µ—á–∞–π —Ç–∞–∫, –±—É–¥—Ç–æ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî —Ç–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è."
        "4. **–î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è** –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ HTML: <b>...</b> –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, <i>...</i> –¥–ª—è –∫—É—Ä—Å–∏–≤–∞. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–±–∑–∞—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–π –û–î–ù–£ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É."
    )
    user_prompt = f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n{dynamic_context}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {question}"
    try:
        completion = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt},
            ],
        )
        return completion.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter AI: {e}")
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—à–µ–Ω–∏–∏ –∫ AI-—Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

if __name__ == "__main__":
    main()