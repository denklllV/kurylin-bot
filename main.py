# START OF FILE: main.py

import sys
import os
import asyncio
from typing import Dict

sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, CallbackQueryHandler, ContextTypes, ExtBot
)

from src.shared.logger import logger
from src.shared.config import (
    PUBLIC_APP_URL, PORT, RUN_MODE, GET_NAME, GET_DEBT, GET_INCOME, GET_REGION
)
from src.infra.clients.supabase_repo import SupabaseRepo
from src.infra.clients.openrouter_client import OpenRouterClient
from src.infra.clients.hf_whisper_client import WhisperClient
from src.app.services.ai_service import AIService
from src.app.services.lead_service import LeadService
from src.app.services.analytics_service import AnalyticsService
from src.api.telegram import handlers

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ Application –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
running_bots: Dict[str, Application] = {}

async def router_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –≠—Ç–æ—Ç callback –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –ö–ê–ñ–î–û–ì–û –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    –ï–≥–æ –∑–∞–¥–∞—á–∞ - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–º—É –±–æ—Ç—É (–∫–ª–∏–µ–Ω—Ç—É) –æ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ,
    –∏ –ø–µ—Ä–µ–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏–Ω—Å—Ç–∞–Ω—Å—É Application.
    """
    token = context.bot.token
    if token in running_bots:
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –Ω—É–∂–Ω—ã–π Application
        await running_bots[token].process_update(update)

def register_handlers(app: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞ Application."""
    form_button_filter = filters.Regex('^üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É$')
    contact_button_filter = filters.Regex('^üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$')
    cancel_filter = filters.Regex('^–û—Ç–º–µ–Ω–∞$')
    quiz_button_filter = filters.Regex('^üéØ –ö–≤–∏–∑$')

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(form_button_filter, handlers.start_form)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_name)],
            GET_DEBT: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_debt)],
            GET_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_income)],
            GET_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~cancel_filter, handlers.get_region)],
        },
        fallbacks=[CommandHandler('cancel', handlers.cancel), MessageHandler(cancel_filter, handlers.cancel)],
    )
    
    app.add_handler(CommandHandler("start", handlers.start))
    app.add_handler(CommandHandler("stats", handlers.stats))
    app.add_handler(CommandHandler("last_answer", handlers.last_answer_debug))
    app.add_handler(CommandHandler("health_check", handlers.health_check))
    
    app.add_handler(CallbackQueryHandler(handlers.quiz_answer, pattern='^quiz_step_'))
    app.add_handler(CallbackQueryHandler(handlers.start_quiz_from_prompt, pattern='^start_quiz_from_prompt$'))

    app.add_handler(MessageHandler(quiz_button_filter, handlers.start_quiz))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(contact_button_filter, handlers.contact_human))
    
    app.add_handler(MessageHandler(filters.VOICE, handlers.handle_voice_message))
    text_filter = filters.TEXT & ~filters.COMMAND & ~form_button_filter & ~contact_button_filter & ~quiz_button_filter
    app.add_handler(MessageHandler(text_filter, handlers.handle_text_message))

async def main() -> None:
    logger.info(f"Starting multi-tenant bot in {RUN_MODE} mode...")

    # --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ---
    supabase_repo = SupabaseRepo()
    or_client = OpenRouterClient()
    whisper_client = WhisperClient()
    
    clients = supabase_repo.get_active_clients()
    if not clients:
        logger.error("No active clients found. Shutting down.")
        return

    # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π ExtBot. –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ bot.send_message
    # –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –Ω–æ —ç—Ç–æ –Ω–µ –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ.
    generic_bot = ExtBot(token=clients[0]['bot_token'])

    # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤
    ai_service = AIService(or_client, whisper_client, supabase_repo)
    lead_service = LeadService(supabase_repo, generic_bot)
    analytics_service = AnalyticsService(supabase_repo)

    # --- 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ ---
    for client in clients:
        token = client['bot_token']
        app = Application.builder().token(token).build()

        # –ü–æ–º–µ—â–∞–µ–º –æ–±—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã –≤ bot_data –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.bot_data['ai_service'] = ai_service
        app.bot_data['lead_service'] = lead_service
        app.bot_data['analytics_service'] = analytics_service
        app.bot_data['last_debug_info'] = {}

        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–∞–Ω–Ω—ã–µ
        app.bot_data['client_id'] = client['id']
        app.bot_data['manager_contact'] = client['manager_contact']

        register_handlers(app)
        running_bots[token] = app
        logger.info(f"Client '{client['client_name']}' (ID: {client['id']}) configured.")

    # --- 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞) ---
    if RUN_MODE == 'WEBHOOK':
        # –°–æ–∑–¥–∞–µ–º "–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞", –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –í–°–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        dispatcher_app = Application.builder().token(clients[0]['bot_token']).updater(None).build()
        dispatcher_app.add_handler(MessageHandler(filters.ALL, router_callback))
        
        async with dispatcher_app:
            await dispatcher_app.initialize()
            for token in running_bots:
                webhook_url = f"{PUBLIC_APP_URL}/{token}"
                await running_bots[token].bot.set_webhook(url=webhook_url, allowed_updates=Update.ALL_TYPES)
                logger.info(f"Webhook set for bot with token ending in ...{token[-4:]} to URL: {webhook_url}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            logger.info(f"Starting shared webhook server on port {PORT}...")
            await dispatcher_app.start_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path="", # –ü—É—Ç—å –Ω–µ –≤–∞–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ Telegram –±—É–¥–µ—Ç —Å—Ç—É—á–∞—Ç—å—Å—è –Ω–∞ /<TOKEN>
                webhook_url=PUBLIC_APP_URL
            )
            logger.info("Multi-tenant bot is operational.")
            await asyncio.Event().wait() # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∂–∏–≤—ã–º

    elif RUN_MODE == 'POLLING':
        logger.info("Starting all clients in POLLING mode...")
        # –í —Ä–µ–∂–∏–º–µ POLLING –º—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –±–æ—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        polling_tasks = [app.run_polling() for app in running_bots.values()]
        await asyncio.gather(*polling_tasks)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot shutdown requested.")
    except Exception as e:
        logger.error(f"An unhandled exception occurred: {e}", exc_info=True)

# END OF FILE: main.py